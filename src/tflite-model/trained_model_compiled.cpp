/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 16.09.2022 14:57:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.003890931373462081, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -107,-57,-78,41,43,-29,80,85,127,44,52,43,-46,10,-17,7,-7,4,-4,-44,18,-21,-32,-21,37,48,-75,-75,-42,-1,24,108,62,13,60,26,-26,-42,-30,-6, 20,91,101,-13,-5,-26,8,-24,32,2,23,30,-37,-49,-65,2,-78,-47,-69,-41,-1,-55,11,-54,22,1,-74,-46,-74,27,38,68,69,-13,17,-21,5,-21,-43,-8, -103,-75,-68,-16,-10,-108,-21,-30,-75,-81,-80,-104,-10,-30,-50,-51,-76,-73,9,22,32,-8,-14,-64,13,42,-66,-49,-89,49,74,23,29,-4,-30,-44,-3,-43,-8,-14, 
  /* [1][0][][] */ -26,14,6,-24,-8,-77,68,47,-23,80,71,39,83,2,24,27,-27,-97,-30,14,17,-11,-21,-44,8,8,-54,-13,-62,-5,-18,-25,-24,19,40,20,43,63,45,27, -7,-21,-25,17,-1,-45,58,32,-3,81,64,2,-6,-127,-46,-126,-59,-36,-52,-17,37,6,28,34,26,16,-63,-54,-53,-20,-26,10,-7,9,8,37,19,54,56,36, -7,-10,-5,-43,-51,-47,-7,-22,-11,41,25,-20,14,-5,-45,-32,-50,-107,-61,-69,-6,-41,-8,-6,-1,-20,-52,-24,-13,-27,-57,-18,24,9,23,36,41,59,42,15, 
  /* [2][0][][] */ -91,-10,-8,27,-6,-43,4,35,33,11,20,38,57,7,-6,-92,-33,-32,-8,-14,2,54,-16,31,1,-9,-39,-7,-59,1,35,73,55,-18,25,15,-11,-33,-31,-5, -108,11,15,62,46,-24,-25,-34,27,-20,1,-22,12,22,45,-47,-70,-41,4,32,-4,40,-37,-5,26,-11,-68,3,-51,-14,39,63,31,-19,14,-3,10,-17,-44,-7, -127,-20,10,53,66,-50,17,9,-22,-30,-9,-33,51,42,34,-89,-55,-4,4,-18,27,26,-21,16,-9,-3,-25,9,-55,-32,52,68,41,-13,16,22,2,-37,-2,-16, 
  /* [3][0][][] */ -62,-28,-51,12,12,-49,-23,-9,8,21,19,71,57,49,24,-35,-18,6,-22,0,-19,0,20,-3,18,-30,51,-16,-12,9,24,20,24,-5,-8,-20,-81,-86,-107,-85, -63,-41,-39,44,74,8,43,34,42,4,-30,90,48,39,4,14,-30,6,-11,-10,-24,-4,15,-18,-31,-41,58,-21,1,-5,35,3,13,19,9,-18,-74,-127,-101,-92, -65,-75,-42,11,33,-36,23,15,27,19,31,74,42,91,59,19,12,-1,-28,42,7,-29,-15,-33,-28,-43,55,24,-8,2,10,8,21,36,22,0,-70,-105,-83,-93, 
  /* [4][0][][] */ -88,-12,-30,28,35,-19,18,17,-24,40,43,41,17,-24,-35,-72,-24,7,15,-51,33,28,-53,-29,-2,-20,-49,19,56,8,39,30,51,-18,-24,-13,14,-6,-53,5, -83,31,16,53,64,9,-24,-18,-13,12,17,1,-12,-35,-28,-45,-28,7,21,-16,7,9,-67,-8,1,-18,-71,20,35,10,39,54,16,-12,19,5,17,-35,-32,-24, -127,-14,7,63,67,-33,-69,-61,-2,30,35,-8,39,-25,-33,-69,-60,41,52,-23,8,5,-33,-34,0,-43,-49,22,54,-3,10,42,28,-17,-5,11,1,-8,-24,-4, 
  /* [5][0][][] */ 60,-16,-13,14,11,45,38,37,42,-29,-12,-29,11,-88,34,19,44,31,-21,-25,37,61,-11,13,30,21,18,-13,-24,-27,3,-74,-64,-67,-25,45,-27,-17,-2,16, -127,-82,-87,59,38,33,33,37,-19,-33,-59,-88,-65,-101,50,10,4,5,48,-92,0,36,-72,-12,49,53,5,17,-34,17,23,-43,-38,-53,12,46,-29,51,4,38, -35,-29,-38,-5,15,0,24,28,26,-43,-26,-36,-12,-49,69,61,11,-7,44,-45,-17,44,-28,0,65,70,-3,-7,10,12,0,-100,-86,-108,16,1,-28,5,-22,29, 
  /* [6][0][][] */ -127,-29,-36,14,25,19,72,61,-54,6,-17,38,30,26,-15,10,27,28,57,3,-17,37,15,29,-38,-81,-67,-85,-76,-22,13,16,38,53,36,44,39,-48,-48,19, -37,43,48,42,28,23,-108,-117,-47,-65,-59,32,48,37,4,-6,-27,-4,-26,24,24,90,29,45,-82,-38,-78,-104,-72,2,58,1,-15,-22,45,42,15,1,-37,13, -81,44,39,42,45,-34,-41,-50,-45,-12,-20,-42,-6,40,-94,-61,-41,-1,54,34,24,19,-22,-10,-53,-18,-41,-83,-61,25,44,-49,-42,7,21,32,50,-8,4,14, 
  /* [7][0][][] */ -127,-5,-3,-61,-62,-17,-29,-25,-16,-2,-8,18,15,22,4,11,0,-2,1,-14,13,7,14,23,19,-2,10,-9,12,17,1,8,2,-5,-5,19,12,-24,-6,-17, -56,-2,-3,-23,-30,23,-2,-2,15,-12,-13,-4,11,2,9,-8,1,-15,-6,-2,6,1,3,-10,10,-7,0,-19,9,2,-11,0,-12,-4,-8,10,-2,-3,11,-9, -63,-28,-27,-35,-30,43,19,20,4,4,-1,14,-1,11,-11,7,-12,-24,-25,-6,-4,-4,9,-15,-14,-27,1,-11,2,-3,-15,-5,-15,-16,-3,-4,-10,6,21,-2, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.010109396651387215, 0.010190684348344803, 0.011637536808848381, 0.0099692801013588905, 0.011629535816609859, 0.009935431182384491, 0.011310200206935406, 0.041226573288440704, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -530, 1102, 3499, 2040, 4160, 1576, -461, 286, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 3.9334969187621027e-05, 3.9651255065109581e-05, 4.5280856284080073e-05, 3.878978532156907e-05, 4.5249726099427789e-05, 3.8658079574815929e-05, 4.4007214455632493e-05, 0.00016040976333897561, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -67,-124,-9,6,-16,16,72,28, -54,-127,-54,1,-47,13,-3,11, -4,-107,-12,19,-8,20,29,24, 
  /* [1][0][][] */ -127,27,-17,-5,-6,-22,-8,-65, -23,-5,21,14,13,-20,-13,-87, -18,-15,31,15,26,-17,-3,-92, 
  /* [2][0][][] */ -25,16,-4,-25,-2,-7,101,-127, -38,-10,-16,-20,-32,-30,-64,-83, -87,0,20,-16,27,66,-62,-37, 
  /* [3][0][][] */ -64,54,-8,-10,-24,8,-46,127, -88,-9,-47,6,-38,-2,-18,0, -19,-24,-47,6,-29,-11,1,27, 
  /* [4][0][][] */ -62,-127,-5,-29,-30,1,-56,82, -61,-120,12,-29,-52,-6,6,31, -48,-115,-9,32,-57,11,-62,84, 
  /* [5][0][][] */ -15,-71,21,62,31,-3,-82,124, 29,-118,-4,-42,29,4,41,-40, -53,-64,13,-39,-12,-11,50,127, 
  /* [6][0][][] */ 127,-4,30,-16,-6,18,-47,-37, 116,-6,-3,-21,-20,-7,-8,-63, 62,-7,-13,-14,12,-30,4,-63, 
  /* [7][0][][] */ 90,-7,56,-40,16,36,61,-35, 55,-11,-43,-67,24,6,25,-60, -27,-12,-61,-127,-36,-29,-9,-19, 
  /* [8][0][][] */ -87,-102,35,0,14,0,-38,127, -41,-71,-6,38,15,-32,18,24, -29,-46,-15,-14,4,-58,-37,23, 
  /* [9][0][][] */ 4,-8,-38,-99,-2,23,-32,-85, 6,-16,51,-127,10,36,61,-62, -18,-13,9,-89,-3,-32,-34,-88, 
  /* [10][0][][] */ 127,-4,58,-57,-10,-77,-29,2, 107,-3,5,-91,53,25,99,-64, 14,-3,-6,-120,-20,-14,75,-84, 
  /* [11][0][][] */ 19,-24,-26,-30,-59,-15,12,8, -31,39,-17,-27,-46,-16,56,127, -45,24,-37,23,-22,2,39,41, 
  /* [12][0][][] */ 85,-7,-34,-94,12,17,-13,-46, 58,-9,85,-114,22,-41,71,-45, 58,-17,-27,-127,-9,54,5,-87, 
  /* [13][0][][] */ -86,-124,14,21,-57,-66,-31,84, -127,-85,12,-18,-64,-106,-54,16, -46,-109,-21,16,-38,-57,-32,31, 
  /* [14][0][][] */ 3,-8,-13,23,-44,6,-87,-105, -12,-6,-5,-49,-15,-16,-127,-62, 2,73,-20,-68,-13,-8,-103,-106, 
  /* [15][0][][] */ -70,-14,-54,-127,-21,-44,-21,-34, 5,-6,-67,-127,8,37,61,-14, -9,-10,50,-67,46,46,-35,-37, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.012007839046418667, 0.014610243029892445, 0.012350709177553654, 0.013500990346074104, 0.011546391062438488, 0.0081104161217808723, 0.018387190997600555, 0.013723792508244514, 0.013138384558260441, 0.013627930544316769, 0.010871349833905697, 0.010918899439275265, 0.010290822014212608, 0.010620386339724064, 0.011902617290616035, 0.013602684251964092, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { 811, -1775, -156, -1249, -403, -2205, -115, -136, -1929, -47, -80, -1628, -59, 1436, -3347, -40, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00017358866170980036, 0.00021120974270161241, 0.00017854529141914099, 0.00019517408509273082, 0.00016691784549038857, 0.00011724643263733014, 0.00026581034762784839, 0.00019839496235363185, 0.00018993215053342283, 0.00019700915436260402, 0.00015715925837866962, 0.00015784664719831198, 0.00014876699424348772, 0.00015353126218542457, 0.00017206755001097918, 0.00019664419232867658, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[2*400] = { 
  25, 15, 0, 36, 23, 93, 10, -28, 78, -48, -36, 75, -44, 53, 85, -44, 19, 46, -18, 45, 28, 13, -40, -94, 36, -48, -59, 4, -56, 65, 86, -9, 6, 14, -31, 44, 23, 62, 7, -92, 36, -42, -37, 7, -27, 30, 67, -91, 27, -67, -57, 104, 36, 28, 15, -35, 20, -8, 16, 73, 17, 2, 48, -48, 7, -20, 61, 63, 53, -49, -47, 32, -3, -49, -37, 11, -4, 36, 33, -92, -6, 16, -9, 37, 9, 39, -51, -35, -20, -78, -95, 10, -74, 62, 35, -64, -17, 26, -32, 50, -13, 52, -27, -54, 92, -30, -24, 79, -15, 39, -49, -53, -39, 10, -45, 42, -43, 7, -19, -43, 41, -69, 45, 24, -38, 0, -83, -45, -46, -16, 48, -12, 9, 28, 3, -17, -2, -44, -9, 1, -87, -6, -9, -61, 15, -2, 17, 47, 47, 32, -43, -19, 15, -78, -27, 17, -16, 18, 52, -20, 56, 27, 57, 61, 63, 15, -34, -17, 8, -31, -48, -9, -27, 36, 30, 5, 26, 29, 52, 34, 81, -22, -1, -68, 51, 6, -48, -28, -17, 16, -6, -40, 27, 33, -4, 13, 49, 24, 16, -58, 70, -53, -29, 11, -53, -11, 45, -79, 9, 25, 32, 24, -15, 8, -29, -48, 3, -51, -59, 39, -40, -3, 79, -49, 5, 33, -32, 51, 70, 55, 4, -66, -5, -42, -69, 33, -44, -17, 30, -25, 16, -25, -42, 64, 5, 25, 1, -15, 58, -16, 22, 17, -22, -3, 22, -50, 19, -30, 30, 29, 29, 34, -43, -20, 9, -57, -34, 62, -26, 12, -1, -72, 16, 9, -12, 69, -24, 50, -38, 32, 43, -37, -5, 95, -29, -18, 23, 2, 20, 6, -36, 50, 3, 68, -53, -12, 11, -27, -26, 65, -57, 13, -13, -54, -40, -27, -9, 34, 18, 16, -12, -83, 9, -6, -47, 43, 25, 0, -114, -21, -49, -5, -39, 55, -11, 10, -61, -47, 12, -72, -9, -21, -36, 13, -61, 7, -41, -14, 19, 4, 80, 13, -35, -29, -11, -58, -22, 35, 6, 29, 16, -37, 54, 2, 23, 65, 48, 13, -127, -63, 70, -35, -113, 10, -87, 37, 77, -21, 72, 18, 11, 0, 61, 23, -63, -18, 8, 6, -22, -22, 6, 45, 92, -36, 64, 49, 21, 39, 19, 19, 2, -30, 123, -35, -19, -21, -26, 110, -22, -72, 
  -21, -40, -3, -37, -11, -95, 2, 36, -74, 53, 37, -71, 43, -52, -89, 30, -9, -55, 33, -43, -34, -8, 32, 90, -55, 41, 83, -13, 58, -59, -82, 25, -7, -11, 33, -55, -22, -76, 2, 88, -51, 52, 42, 11, 19, -43, -57, 98, -17, 68, 66, -93, -34, -28, -20, 47, -12, -10, -2, -75, -16, -22, -46, 56, -14, 27, -66, -89, -55, 38, 58, -22, 2, 28, 26, -10, -3, -29, -44, 87, -5, -11, 24, -48, -18, -47, 68, 28, 8, 60, 93, -29, 69, -57, -33, 64, 25, -10, 54, -47, 12, -53, 45, 53, -80, 33, 23, -77, -2, -45, 53, 54, 45, -19, 47, -44, 34, -27, 19, 51, -29, 70, -41, -12, 33, -8, 90, 43, 45, 15, -44, 26, -1, -35, -4, 25, 22, 43, 23, 7, 87, 21, 10, 61, -13, -11, -6, -29, -35, -37, 42, 11, 0, 84, 41, -13, 24, -23, -42, 0, -57, -17, -40, -52, -56, -19, 34, 33, -30, 15, 62, 1, 6, -27, -9, -17, -14, -17, -51, -24, -101, 15, 15, 69, -75, 12, 49, 37, 14, -11, -2, 40, -27, -32, -7, -26, -31, -32, -13, 53, -52, 43, 33, -3, 60, 12, -43, 91, 10, -35, -19, -28, 9, -21, 31, 51, -25, 57, 53, -47, 47, -1, -88, 49, 3, -34, 43, -39, -47, -39, 1, 57, 7, 58, 67, -41, 47, -3, -15, 39, -29, 29, 50, -48, -16, -23, -17, 14, -58, 34, -16, -31, 23, 5, -17, 43, 2, 34, -11, -21, -35, -10, 56, 14, -19, 60, 12, -69, 29, -22, 16, 73, -13, -9, -9, -72, 3, -52, 51, -31, -61, 34, 13, -102, 25, 8, -22, -5, -16, -7, 41, -47, -21, -77, 42, 18, -25, 32, 51, -60, 59, -31, 11, 74, 19, 33, 7, -49, -25, -22, 34, 75, -15, -6, 58, -45, -3, 2, 88, 25, 42, 30, 34, -61, 19, -9, 44, 60, -24, 64, 5, 10, 35, 4, 44, -10, 40, 2, -24, 11, -89, -3, 31, 41, 3, 43, 37, -9, -6, -48, -27, 33, -36, 19, -15, -81, -56, -14, 120, 62, -77, 36, 126, 1, 73, -30, -65, 21, -54, -43, -13, -7, -63, -27, 68, 18, -4, -17, 19, 25, -5, -62, -71, 43, -62, -47, -10, -36, -13, 1, -3, 26, -102, 30, 23, 36, 47, -104, 25, 90, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 2,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0090917814522981644, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[2] = { -1234, 1234, };
const TfArray<1, int> tensor_dimension11 = { 1, { 2 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00015627039829269052, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.003890931373462081, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.014456278644502163, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.014456278644502163, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.014456278644502163, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.014456278644502163, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.017188094556331635, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.017188094556331635, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.017188094556331635, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.017188094556331635, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.15954124927520752, } };
const TfArray<1, int> quant21_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
